<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>BODY</name>
          <description></description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@4.6.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>https://github.com/CAETESTRWTH/CAE-Deployment-Temp</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/master</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="empty-list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.WipeWorkspace/>
    </extensions>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <authToken>1475f18c-561d-4c6b-8ffa-4d3ed65d96ea</authToken>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

rm -rf &quot;$WORKSPACE&quot;/json.properties
touch &quot;$WORKSPACE&quot;/json.properties

# Install zip for archiving build folders
sudo apt install zip
# Install for json data operations
sudo apt-get --assume-yes install jq

# Get the passed body information of post request from frontend for application metainfo
RELEASENAME=$(echo &quot;$BODY&quot; | jq -r &apos;.name&apos;) 
RELEASE_VERSION=$(echo &quot;$BODY&quot; | jq -r &apos;.version&apos;) 
ls
# Build all components of the cae application
if [ -f &quot;get_ext_dependencies.sh&quot; ]; then
    chmod +x get_ext_dependencies.sh
    ./get_ext_dependencies.sh
fi
ls

for dir in microservice-*/ ; do
    if [ -d &quot;$dir&quot; ]; then
        (cd &quot;$dir&quot; &amp;&amp; ant clean_before_build generate_configs clean_after_build)
    fi
done

for dir in dependencies/microservices/*; do
    if [ -d &quot;$dir&quot; ]; then
        (cd &quot;$dir&quot; &amp;&amp; ant clean_before_build generate_configs clean_after_build)
    fi
done





rm -rf &quot;$RELEASENAME&quot;
mkdir &quot;$RELEASENAME&quot;

# Copy built components if existing into new folder to archive to include in docker image
if ls frontendComponent-* 1&gt; /dev/null 2&gt;&amp;1; then
    cp -r ./frontendComponent-* ./&quot;$RELEASENAME&quot;
else
    echo &quot;frontendComponent files do not exist&quot;
fi
if ls microservice-* 1&gt; /dev/null 2&gt;&amp;1; then
    cp -r ./microservice-* ./&quot;$RELEASENAME&quot;
else
    echo &quot;microservice files do not exist&quot;
fi

cd &quot;$RELEASENAME&quot; || exit
zip -r ../archive.zip ./*
cd ..

# Build the docker image and push it to a image repository 

# Remove old clone of cae template
rm -rf cae-deployment

# CAE Deployment Docker container is used to run CAE created application. 
# Uses ziped artifact from current build and copies it into iamge to use it
# git clone https://github.com/rwth-acis/cae-deployment.git -b ba-erdzan
git clone https://github.com/rwth-acis/cae-deployment -b ba-erdzan
cp ./archive.zip ./cae-deployment
cd cae-deployment || exit
docker login --username erdzan12 --password bebwe7-qemhem-sebhAt
docker build -t &quot;$RELEASENAME&quot;:&quot;$RELEASE_VERSION&quot; ./
# Push image to repo
docker tag &quot;$RELEASENAME&quot;:&quot;$RELEASE_VERSION&quot; erdzan12/&quot;$RELEASENAME&quot;:&quot;$RELEASE_VERSION&quot;
# HASH=$(docker inspect --format=&apos;{{index .RepoDigests 0}}&apos; erdzan12/$RELEASENAME:$RELEASE_VERSION)
 
HASH=$(docker push erdzan12/&quot;$RELEASENAME&quot;:&quot;$RELEASE_VERSION&quot; | grep -o &apos;sha256:.*&apos; | cut -c 8- | head -c 64)
COUNT=$( echo &quot;$HASH&quot; | awk &apos;{ print length; }&apos;)
echo &quot;$COUNT&quot;
echo HASH_VAL=&quot;$HASH&quot; &gt; &quot;$WORKSPACE&quot;/json.properties
cat &quot;$WORKSPACE&quot;/json.properties</command>
      <configuredLocalRules/>
    </hudson.tasks.Shell>
    <EnvInjectBuilder plugin="envinject@2.4.0">
      <info>
        <propertiesFilePath>$WORKSPACE/json.properties</propertiesFilePath>
      </info>
    </EnvInjectBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder plugin="conditional-buildstep@1.4.1">
      <condition class="org.jenkins_ci.plugins.run_condition.core.StatusCondition" plugin="run-condition@1.5">
        <worstResult>
          <name>SUCCESS</name>
          <ordinal>0</ordinal>
          <color>BLUE</color>
          <completeBuild>true</completeBuild>
        </worstResult>
        <bestResult>
          <name>SUCCESS</name>
          <ordinal>0</ordinal>
          <color>BLUE</color>
          <completeBuild>true</completeBuild>
        </bestResult>
      </condition>
      <buildStep class="hudson.plugins.parameterizedtrigger.TriggerBuilder" plugin="parameterized-trigger@2.40">
        <configs>
          <hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
            <configs>
              <hudson.plugins.parameterizedtrigger.CurrentBuildParameters/>
              <hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
                <properties>HASH=${HASH_VAL}</properties>
                <textParamValueOnNewLine>false</textParamValueOnNewLine>
              </hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
            </configs>
            <projects>AnnounceCAERelease</projects>
            <condition>ALWAYS</condition>
            <triggerWithNoParameters>false</triggerWithNoParameters>
            <triggerFromChildProjects>false</triggerFromChildProjects>
            <block>
              <buildStepFailureThreshold>
                <name>FAILURE</name>
                <ordinal>2</ordinal>
                <color>RED</color>
                <completeBuild>true</completeBuild>
              </buildStepFailureThreshold>
              <unstableThreshold>
                <name>UNSTABLE</name>
                <ordinal>1</ordinal>
                <color>YELLOW</color>
                <completeBuild>true</completeBuild>
              </unstableThreshold>
              <failureThreshold>
                <name>FAILURE</name>
                <ordinal>2</ordinal>
                <color>RED</color>
                <completeBuild>true</completeBuild>
              </failureThreshold>
            </block>
            <buildAllNodesWithLabel>false</buildAllNodesWithLabel>
          </hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
        </configs>
      </buildStep>
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.5"/>
    </org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>