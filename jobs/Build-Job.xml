<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>BODY</name>
          <description></description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@4.6.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>https://github.com/CAETESTRWTH/CAE-Deployment-Temp</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/master</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="empty-list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.WipeWorkspace/>
    </extensions>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <authToken>1475f18c-561d-4c6b-8ffa-4d3ed65d96ea</authToken>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command># Install zip for archiving build folders
sudo apt install zip

# Get the passed body information of post request from frontend for application metainfo
RELEASENAME=$(echo $BODY | jq -r &apos;.name&apos;) 

if [ -f &quot;get_ext_dependencies.sh&quot; ]; then
    chmod +x get_ext_dependencies.sh
    ./get_ext_dependencies.sh
fi
    
for dir in microservice-*/ ; do
    if [ -d &quot;$dir&quot; ]; then
        (cd $dir &amp;&amp; ant clean_before_build generate_configs clean_after_build)
    fi
done

for dir in dependencies/microservices/*; do
    if [ -d &quot;$dir&quot; ]; then
        (cd $dir &amp;&amp; ant clean_before_build generate_configs clean_after_build)
    fi
done
rm -rf $RELEASENAME
mkdir $RELEASENAME

if ls frontendComponent-* 1&gt; /dev/null 2&gt;&amp;1; then
    cp -r ./frontendComponent-* ./$RELEASENAME
else
    echo &quot;frontendComponent files do not exist&quot;
fi
if ls microservice-* 1&gt; /dev/null 2&gt;&amp;1; then
    cp -r ./microservice-* ./$RELEASENAME
else
    echo &quot;microservice files do not exist&quot;
fi


zip -r archive.zip $RELEASENAME

# Use this job to build the docker image and push it to a image repository 
# Install for json data operations
sudo apt-get --assume-yes install jq
# Get the passed body information of post request from frontend for application metainfo
RELEASENAME=$(echo $BODY | jq -r &apos;.name&apos;) 
rm -rf caedepltest
docker ps | grep <cae-deployment-docker-image> | grep -o &quot;^[a-z0-9]*&quot; | xargs --no-run-if-empty docker stop
docker ps -a | grep <cae-deployment-docker-image> | grep -o &quot;^[a-z0-9]*&quot; | xargs --no-run-if-empty docker rm
docker pull <cae-deployment-docker-image>
# CAE Deployment Docker container is used to run CAE created application. It fetches latest artifact from given CAE Jenkins instance and run it. 
git clone https://git.rwth-aachen.de/jungerjunge2/caedepltest.git
cd caedepltest
docker login --username <docker-hub-login> --password <docker-hub-password>
docker build -t $RELEASENAME:v1 ./
# Push image to repo
docker tag $RELEASENAME:v1 <docker-hub-login>/$RELEASENAME:v1
docker push <docker-hub-login>/$RELEASENAME:v1</command>
      <configuredLocalRules/>
    </hudson.tasks.Shell>
    <org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder plugin="conditional-buildstep@1.4.1">
      <condition class="org.jenkins_ci.plugins.run_condition.core.StatusCondition" plugin="run-condition@1.5">
        <worstResult>
          <name>SUCCESS</name>
          <ordinal>0</ordinal>
          <color>BLUE</color>
          <completeBuild>true</completeBuild>
        </worstResult>
        <bestResult>
          <name>SUCCESS</name>
          <ordinal>0</ordinal>
          <color>BLUE</color>
          <completeBuild>true</completeBuild>
        </bestResult>
      </condition>
      <buildStep class="hudson.plugins.parameterizedtrigger.TriggerBuilder" plugin="parameterized-trigger@2.40">
        <configs>
          <hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
            <configs>
              <hudson.plugins.parameterizedtrigger.CurrentBuildParameters/>
            </configs>
            <projects>AnnounceCAERelease</projects>
            <condition>ALWAYS</condition>
            <triggerWithNoParameters>false</triggerWithNoParameters>
            <triggerFromChildProjects>false</triggerFromChildProjects>
            <block>
              <buildStepFailureThreshold>
                <name>FAILURE</name>
                <ordinal>2</ordinal>
                <color>RED</color>
                <completeBuild>true</completeBuild>
              </buildStepFailureThreshold>
              <unstableThreshold>
                <name>UNSTABLE</name>
                <ordinal>1</ordinal>
                <color>YELLOW</color>
                <completeBuild>true</completeBuild>
              </unstableThreshold>
              <failureThreshold>
                <name>FAILURE</name>
                <ordinal>2</ordinal>
                <color>RED</color>
                <completeBuild>true</completeBuild>
              </failureThreshold>
            </block>
            <buildAllNodesWithLabel>false</buildAllNodesWithLabel>
          </hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
        </configs>
      </buildStep>
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.5"/>
    </org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>