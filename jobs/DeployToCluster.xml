<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>BODY</name>
          <description>Body containing info about which application should be deployed, name and version of release, and cluster name should be included</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <authToken>1475f18c-561d-4c6b-8ffa-4d3ed65d96ea</authToken>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
# Install for json data operations
sudo apt-get --assume-yes install jq
sudo apt-get -y install skopeo

# Install helm
curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -
sudo apt-get install apt-transport-https --yes
echo &quot;deb https://baltocdn.com/helm/stable/debian/ all main&quot; | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
sudo apt-get update
sudo apt-get install helm

RELEASENAME=$(echo &quot;$BODY&quot; | jq -r &apos;.name&apos;) 
CLUSTERNAME=$(echo &quot;$BODY&quot; | jq -r &apos;.clusterName&apos;) 
IMAGE_VERSION=$(echo &quot;$BODY&quot; | jq -r &apos;.version&apos;)
BOOTSTRAP=$(echo &quot;$BODY&quot; | jq -r &apos;.bootstrap&apos;)

if [[ $BOOTSTRAP =~ ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):[0-9]+$ ]]; then
   LAS2PEER_BOOTSTRAP=${BOOTSTRAP}
   echo &quot;Bootstrap is ip and port combo&quot;
elif [ -z &quot;$BOOTSTRAP&quot; ]
then
   LAS2PEER_BOOTSTRAP=${BOOTSTRAP}
   echo &quot;No Bootsrap given&quot;
else
   LAS2PEER_BOOTSTRAP=&quot;${BOOTSTRAP}-service.ba-erdzan&quot;
   echo &quot;Cae bootstrap given&quot;
   echo &quot;$LAS2PEER_BOOTSTRAP&quot;
fi


rm -rf ./*

# Get template helm chart
git clone https://git.rwth-aachen.de/jungerjunge2/helm-temp.git

# setup helm chart with user information
mv ./helm-temp ./&quot;$CLUSTERNAME&quot;
sed -i -e &quot;s={NAME}=$CLUSTERNAME=g&quot; ./&quot;$CLUSTERNAME&quot;/values.yaml
sed -i -e &quot;s={IMAGENAME}=$RELEASENAME=g&quot; ./&quot;$CLUSTERNAME&quot;/values.yaml
sed -i -e &quot;s={IMAGE_VERSION}=$IMAGE_VERSION=g&quot; ./&quot;$CLUSTERNAME&quot;/values.yaml
sed -i -e &quot;s={LAS2PEER_BOOTSTRAP}=$LAS2PEER_BOOTSTRAP=g&quot; ./&quot;$CLUSTERNAME&quot;/values.yaml
sed -i -e &quot;s={NAME}=$CLUSTERNAME=g&quot; ./&quot;$CLUSTERNAME&quot;/Chart.yaml
sed -i -e &quot;s={IMAGE_VERSION}=$IMAGE_VERSION=g&quot; ./&quot;$CLUSTERNAME&quot;/Chart.yaml

helm package ./&quot;$CLUSTERNAME&quot;

# Push helm chart to repo
curl -v --http1.1 --data-binary &quot;@$CLUSTERNAME-0.1.0.tgz&quot; https://mentoring.tech4comp.dbis.rwth-aachen.de/repo/api/charts

# Update helm repo in helm-wrapper
curl -v --http1.1 -X PUT https://mentoring.tech4comp.dbis.rwth-aachen.de/helm/api/repositories

# Send request to helm-wrapper to deploy application
DEPLYMENT_RESPONSE=$(curl -v --http1.1 -X POST https://mentoring.tech4comp.dbis.rwth-aachen.de/helm/api/namespaces/ba-erdzan/releases/&quot;$CLUSTERNAME&quot;?chart=mymus/&quot;$CLUSTERNAME&quot;)
DEPLYMENT_RESPONSE_CODE=$(echo &quot;$DEPLYMENT_RESPONSE&quot; | jq -r &apos;.code&apos;) 
echo &quot;$DEPLYMENT_RESPONSE_CODE&quot;

# Check if errors happened during deployment
if [ $DEPLYMENT_RESPONSE_CODE == 0 ]
then
  echo &quot;$DEPLYMENT_RESPONSE_CODE&quot;
else
  echo &quot;$DEPLYMENT_RESPONSE_CODE&quot;
  exit 1
fi
</command>
      <configuredLocalRules/>
    </hudson.tasks.Shell>
    <hudson.plugins.parameterizedtrigger.TriggerBuilder plugin="parameterized-trigger@2.40">
      <configs>
        <hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
          <configs>
            <hudson.plugins.parameterizedtrigger.CurrentBuildParameters/>
          </configs>
          <projects>AnnounceCAEDeployment</projects>
          <condition>ALWAYS</condition>
          <triggerWithNoParameters>false</triggerWithNoParameters>
          <triggerFromChildProjects>false</triggerFromChildProjects>
          <block>
            <buildStepFailureThreshold>
              <name>FAILURE</name>
              <ordinal>2</ordinal>
              <color>RED</color>
              <completeBuild>true</completeBuild>
            </buildStepFailureThreshold>
            <unstableThreshold>
              <name>UNSTABLE</name>
              <ordinal>1</ordinal>
              <color>YELLOW</color>
              <completeBuild>true</completeBuild>
            </unstableThreshold>
            <failureThreshold>
              <name>FAILURE</name>
              <ordinal>2</ordinal>
              <color>RED</color>
              <completeBuild>true</completeBuild>
            </failureThreshold>
          </block>
          <buildAllNodesWithLabel>false</buildAllNodesWithLabel>
        </hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
      </configs>
    </hudson.plugins.parameterizedtrigger.TriggerBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder plugin="conditional-buildstep@1.4.1">
      <condition class="org.jenkins_ci.plugins.run_condition.core.StatusCondition" plugin="run-condition@1.5">
        <worstResult>
          <name>SUCCESS</name>
          <ordinal>0</ordinal>
          <color>BLUE</color>
          <completeBuild>true</completeBuild>
        </worstResult>
        <bestResult>
          <name>SUCCESS</name>
          <ordinal>0</ordinal>
          <color>BLUE</color>
          <completeBuild>true</completeBuild>
        </bestResult>
      </condition>
      <buildStep class="hudson.plugins.parameterizedtrigger.TriggerBuilder" plugin="parameterized-trigger@2.40">
        <configs>
          <hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
            <configs>
              <hudson.plugins.parameterizedtrigger.CurrentBuildParameters/>
            </configs>
            <projects>AnnounceCAEDeployment</projects>
            <condition>ALWAYS</condition>
            <triggerWithNoParameters>false</triggerWithNoParameters>
            <triggerFromChildProjects>false</triggerFromChildProjects>
            <block>
              <buildStepFailureThreshold>
                <name>FAILURE</name>
                <ordinal>2</ordinal>
                <color>RED</color>
                <completeBuild>true</completeBuild>
              </buildStepFailureThreshold>
              <unstableThreshold>
                <name>UNSTABLE</name>
                <ordinal>1</ordinal>
                <color>YELLOW</color>
                <completeBuild>true</completeBuild>
              </unstableThreshold>
              <failureThreshold>
                <name>FAILURE</name>
                <ordinal>2</ordinal>
                <color>RED</color>
                <completeBuild>true</completeBuild>
              </failureThreshold>
            </block>
            <buildAllNodesWithLabel>false</buildAllNodesWithLabel>
          </hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
        </configs>
      </buildStep>
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.5"/>
    </org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder plugin="conditional-buildstep@1.4.1">
      <condition class="org.jenkins_ci.plugins.run_condition.core.StatusCondition" plugin="run-condition@1.5">
        <worstResult>
          <name>ABORTED</name>
          <ordinal>4</ordinal>
          <color>ABORTED</color>
          <completeBuild>false</completeBuild>
        </worstResult>
        <bestResult>
          <name>UNSTABLE</name>
          <ordinal>1</ordinal>
          <color>YELLOW</color>
          <completeBuild>true</completeBuild>
        </bestResult>
      </condition>
      <buildStep class="hudson.plugins.parameterizedtrigger.TriggerBuilder" plugin="parameterized-trigger@2.40">
        <configs>
          <hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
            <configs>
              <hudson.plugins.parameterizedtrigger.CurrentBuildParameters/>
            </configs>
            <projects>DEPLOY_FAILURE</projects>
            <condition>ALWAYS</condition>
            <triggerWithNoParameters>false</triggerWithNoParameters>
            <triggerFromChildProjects>false</triggerFromChildProjects>
            <block>
              <buildStepFailureThreshold>
                <name>FAILURE</name>
                <ordinal>2</ordinal>
                <color>RED</color>
                <completeBuild>true</completeBuild>
              </buildStepFailureThreshold>
              <unstableThreshold>
                <name>UNSTABLE</name>
                <ordinal>1</ordinal>
                <color>YELLOW</color>
                <completeBuild>true</completeBuild>
              </unstableThreshold>
              <failureThreshold>
                <name>FAILURE</name>
                <ordinal>2</ordinal>
                <color>RED</color>
                <completeBuild>true</completeBuild>
              </failureThreshold>
            </block>
            <buildAllNodesWithLabel>false</buildAllNodesWithLabel>
          </hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
        </configs>
      </buildStep>
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.5"/>
    </org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>